[profiles.code]
api='Completion'
engine="text-davinci-003"
temperature=0
max_tokens=500
top_p=1.0
frequency_penalty=0.0
presence_penalty=0.0

[profiles.code-edit]
api='Edit'
engine="code-davinci-edit-001"
temperature=0
top_p=1.0

[prompts.docstring]
profile='code'
stop=["#", '"""']
prompt = '''
# Python 3.10

{{code}}

# Please write a high quality python docstring conforming to the google code style for docstrings for the above code.

The name of the function is: ```{{parsed.name}}```.

It has the following signature {{parsed.args}}.

Do not return the full function.
Only return the docstring.
Include an example if you can.
It should start with a short summary written in an imperative mood.
followed by a newline.
followed by a short description.
followed by another newline.
then followed by any of the following sections sections if they apply to this function (Args: , Returns: , Raises: , Yields: , Note: , Example: )
'''

[prompts.complete-func]
profile='code'
prompt = '''
# python3.10

fill in the following python function to do what the docstring says to do

{{ text }}
---
'''

[prompts.complete-func-long]
profile='code'
max_tokens=2000
prompt = '''
# python3.10

fill in the following python function to do what the docstring says to do

{{ text }}
---
'''

[prompts.generic]
engine="text-davinci-003"
api='Completion'
temperature=0
max_tokens=150
top_p=1.0
frequency_penalty=0.0
presence_penalty=0.0
stop=["#", '"""']
prompt = '''
{{ text }}
""""
'''

[prompts.generic-creative]
engine="text-davinci-003"
api='Completion'
temperature=0.8
max_tokens=150
top_p=1.0
frequency_penalty=0.0
presence_penalty=0.0
stop=["#", '"""']
prompt = '''
{{input('what do you want to do')}}

'''

[prompts.generic-long]
engine="text-davinci-003"
temperature=0
max_tokens=2000
top_p=1.0
frequency_penalty=0.0
presence_penalty=0.0
stop=["#", '"""']
prompt = '''
{{input('what do you want to do')}}
'''

[prompts.code-create]
profile='code-edit'
input='''
'''
instruction='''
create a python3.10 function to
'''

[prompts.code-edit]
profile='code-edit'
instruction='''
refactor the following python3.10 code to
'''
input='''
{{text}}
'''

[prompts.code-edit-example-1]
profile='code-edit'
instruction='''
create a python function to read text from a url
'''
input='''
'''

[prompts.create-history]
profile='code-edit'
instruction='''
write a python script to pickle a python list into a file called ~/.config/lockhart/history.pkl
'''
input='''
'''

[prompts.save-history]
profile='code-edit'
instruction='''
insert the current datetime into the object
'''
input='''
save_history(load_history().append({'request': prompt, 'response': response}))
'''

[prompts.create-history-pathlib]
profile='code-edit'
instruction='''
refactor this code to use pathlib instead of the os module
'''
input='''
#!/usr/bin/env python

import os
import pickle

from lockhart.console import console


def save_history(history):
    """
    Save the history to a file.
    """
    console.log(f"saving\n{history}")
    home = os.path.expanduser("~")
    config_dir = os.path.join(home, ".config", "lockhart")
    if not os.path.exists(config_dir):
        console.log(f"creating {config_dir}")
        os.makedirs(config_dir)
    history_file = os.path.join(config_dir, "history.pkl")
    with open(history_file, "wb") as f:
        pickle.dump(history, f)
    console.log(f"wrote history")


def load_history():
    """
    Load the history from a file.
    """
    home = os.path.expanduser("~")
    config_dir = os.path.join(home, ".config", "lockhart")
    history_file = os.path.join(config_dir, "history.pkl")
    if os.path.exists(history_file):
        with open(history_file, "rb") as f:
            history = pickle.load(f)
            console.log(f"loaded {len(history)} items into history")
            return history
    else:
        console.log(f"history_file does not exist, returning empty history")
        return []


if __name__ == "__main__":
    history = load_history()
    history.append("test")
    save_history(history)
'''
